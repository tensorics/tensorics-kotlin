buildscript {
    project.ext.CERN_VM = System.getProperty('CERN_TECHNET_VM') ?: System.getenv('CERN_TECHNET_VM') ?: false
    project.ext.TRAVIS_CI = System.getProperty('TRAVIS') ?: System.getenv('TRAVIS') ?: false
    project.ext.DEPLOYMENT = System.getProperty('deployment') ?: false
    project.ext.VCS_TAG = System.getProperty('TRAVIS_TAG') ?: System.getenv('TRAVIS_TAG')
    project.ext.POM = [
            groupId    : 'org.tensorics',
            artifactId : 'tensorics-kotlin',
            description: 'Kotlin DSL for tensorics.',
            developers : [
                    [
                            id   : 'kaifox',
                            name : 'Kajetan Fuchsberger',
                            email: 'kajetan.fuchsberger@gmail.com'
                    ],
                    [
                            id   : 'agorzawski',
                            name : 'Arek Gorzawski',
                            email: 'agorzawski@gmail.com'
                    ],
                    [
                            id   : 'michi42',
                            name : 'Michi Hostettler',
                            email: 'michi.hostettler@cern.ch'
                    ],
                    [
                            id   : 'andreacalia',
                            name : 'Andrea Calia',
                            email: 'andrea.calia.46@gmail.com'
                    ]
            ]]
    project.ext.INFO = [
            repo        : 'https://github.com/tensorics/tensorics-kotlin.git',
            url         : 'http://tensorics.org/',
            github      : 'https://github.com/tensorics/tensorics-kotlin',
            githubIssues: 'https://github.com/tensorics/tensorics-kotlin/issues'
    ]
    project.ext.BINTRAY = [
            repo        : 'tensorics-repo',
            name        : 'org.tensorics:tensorics-core',
            organization: 'tensorics',
            userName    : 'tensorics-dev',
            apiToken    : System.getenv('BINTRAY_API_TOKEN')
    ]

    repositories {
        if (CERN_VM) {
            maven { url 'http://artifactory.cern.ch/gradle-plugins' }
            maven { url 'http://artifactory.cern.ch/ds-jcenter' }
            maven { url 'http://artifactory.cern.ch/development' }
        } else {
            mavenCentral()
            jcenter()
        }
    }
    dependencies {
        classpath 'com.netflix.nebula:nebula-publishing-plugin:5.1.0'
        classpath 'com.jfrog.bintray.gradle:gradle-bintray-plugin:1.7.3'
    }
}

apply plugin: 'java'
apply plugin: 'jacoco'
apply plugin: 'maven'
apply plugin: 'maven-publish'
apply plugin: 'nebula.maven-publish'
apply plugin: 'com.jfrog.bintray'

repositories {
    if (CERN_VM) {
            maven { url 'http://artifactory.cern.ch/ds-jcenter' }
            maven { url 'http://artifactory.cern.ch/development' }
    } else {
        mavenCentral()
        jcenter()
    }
}

if (DEPLOYMENT) {
    println 'Applying deployment scripts'
    apply from: './scripts/bintray-deploy.gradle'
}

group 'org.streamingpool'

sourceCompatibility = 1.8

dependencies {
 	compile 'org.tensorics:tensorics-core:+'
    compile 'org.jscience:jscience:4.3.1'
    compile 'com.google.guava:guava:21.0'
    compile 'org.hamcrest:hamcrest-all:1.3'
    compile 'org.slf4j:slf4j-api:1.7.21'
    compile "org.jetbrains.kotlin:kotlin-stdlib:1.1.4"
    compile "org.jetbrains.kotlin:kotlin-stdlib-jre8:1.1.4"

    testCompile 'junit:junit:4.12'
    testCompile 'org.slf4j:slf4j-log4j12:+'
    testCompile 'pl.pragmatists:JUnitParams:1.0.4'
    testCompile 'org.mockito:mockito-core:1.10.19'
    testCompile 'org.objenesis:objenesis:2.4'
    testCompile 'com.openpojo:openpojo:0.8.4'
    testCompile 'org.assertj:assertj-core:3.6.1'
    testCompile 'nl.jqno.equalsverifier:equalsverifier:2.3.1'
}

sourceSets {
    main {
        java {
            srcDir 'src/java'
        }
    }
    test {
        java {
            srcDir 'src/test'
        }
    }
}

javadoc { options.encoding = "UTF-8" }

task wrapper(type: Wrapper) { gradleVersion = '4.0' }

task javadocJar(type: Jar) {
    classifier = 'javadoc'
    from javadoc
}

task sourcesJar(type: Jar) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

artifacts { archives javadocJar, sourcesJar }

jacocoTestReport {
    reports {
        xml.enabled true
        xml.destination new File("${buildDir}/reports/jacoco/report.xml")
        html.enabled true
        csv.enabled false
    }
}
